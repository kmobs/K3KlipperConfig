# TODO list:
# - add macros for chamber lighting (need to setup pins in printer.cfg too)

[gcode_macro Enable_Features]
variable_nozzle_wiper:  False
variable_status_led:    False
gcode:

[gcode_macro Homing_Variables]
variable_lift_z:                2.0     # distance to lift z before homing
variable_x_homing_pos:          111.5    # x position when homing z
variable_y_homing_pos:          90.0    # y position when homing z
variable_z_end_pos:             1.0    # z position to move to after homing
variable_xy_speed:              300     # x and y speed before homing z (mm/s)
variable_z_speed:               40      # z speed before and after homing (mm/s)
variable_x_current_multiplier:  0.4     # run and hold current multiplier for x axis during homing
variable_y_current_multiplier:  0.4     # run and hold current multiplier for y axis during homing
gcode:


[homing_override]
axes: xyz
set_position_z: 0
gcode:
    {% set Lz = printer["gcode_macro Homing_Variables"].lift_z %}
    {% set Hx = printer["gcode_macro Homing_Variables"].x_homing_pos %}
    {% set Hy = printer["gcode_macro Homing_Variables"].y_homing_pos %}
    {% set Ez = printer["gcode_macro Homing_Variables"].z_end_pos %}
    {% set Sxy = printer["gcode_macro Homing_Variables"].xy_speed * 60 %}
    {% set Sz = printer["gcode_macro Homing_Variables"].z_speed * 60 %}
    {% set HcX = printer["gcode_macro Homing_Variables"].x_current_multiplier|float %}
    {% set HcY = printer["gcode_macro Homing_Variables"].y_current_multiplier|float %}
    {% set no_params = not('X' in params or 'Y' in params or 'Z' in params) %}

    # lift z before homing
    G1 Z{Lz} F{Sz}

    # home x
    {% if 'X' in params or no_params %}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={(printer.configfile.config["tmc5160 stepper_x"]["run_current"]|float)*HcX} 
        SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={(printer.configfile.config["tmc5160 stepper_x1"]["run_current"]|float)*HcX} 
        G28 X{printer.configfile.config["stepper_x"]["position_endstop"]}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.config["tmc5160 stepper_x"]["run_current"]|float} 
        SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={printer.configfile.config["tmc5160 stepper_x1"]["run_current"]|float} 
    {% endif %}
    
    # home y
    {% if 'Y' in params or no_params %}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={(printer.configfile.config["tmc5160 stepper_y"]["run_current"]|float)*HcY} 
        SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={(printer.configfile.config["tmc5160 stepper_y1"]["run_current"]|float)*HcY} 
        G28 Y{printer.configfile.config["stepper_y"]["position_endstop"]}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.config["tmc5160 stepper_y"]["run_current"]|float} 
        SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={printer.configfile.config["tmc5160 stepper_y1"]["run_current"]|float} 
    {% endif %}
    
    # home z
    {% if 'Z' in params or no_params %}
        G1 X{Hx} Y{Hy} F{Sxy}
        G28 Z0
        G1 Z{Ez} F{Sz}
    {% endif %}

[gcode_macro Print_Start]
# make sure to call Heatsoak before calling this, if needed
# at the minimum, make sure to pass PA, EXTRUDER, and BED parameters    # should be set!!!
gcode:    
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
    {% set BED = params.BED|default(110) %}
    {% set CHAMBER_TARGET = params.CHAMBER_TARGET|default(40) %}
    {% set BEACON_TARGET = params.BEACON_TARGET|default(68) %}
    {% set OFFSET = params.OFFSET|default(0) %}
    {% set RESET = params.RESET|default('True') %}
    {% set Prime = params.Prime|default('True') %}

    {% if RESET == 'True' %}
        Reset_State
    {% endif %}
    halo_on
    
    ;caselights_on
    {% set nozzle_wiper          = printer["gcode_macro Enable_Features"].nozzle_wiper          %}
    ;SET_PRESSURE_ADVANCE ADVANCE={PA}
    #Do this in your slicer
    M117 Starting
    BED_MESH_CLEAR
    G28
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_heater TARGET={CHAMBER_TARGET}
    Beacon_Soak BEACON_TARGET={BEACON_TARGET} EXTRUDER={EXTRUDER} BED={BED}
    halo_printing
    M140 S{BED}                 ; set bed temp
    ;M109 S160                   ; set extruder temp before bed level
    M190 S{BED}                 ; wait for bed temp
    
    # homing stuff
    z_tilt_adjust
    g28 z
    BED_MESH_CALIBRATE runs=2
    M107

    SET_GCODE_OFFSET Z={OFFSET} ; set z offset (usually 0)
    ;DETACH_PROBE
    
    # wait for extruder temperature, and either print a prime line or purge
    {% if PRIME == 'True' or not(nozzle_wiper) %}
        M104 S{EXTRUDER}        ; set extruder temp
        G1 F18000
        G1 X05 Y05              ; move to prime line start point
        M400                    ; wait for moves to finish
        M109 S{EXTRUDER}        ; wait for extruder temp
        Prime_Line              ; prime line
    {% else %}
        Go_To_Purge_Location
        M104 S{EXTRUDER}
        G1 Z0.6
        Purge EXACT_TEMP=True TEMPERATURE={EXTRUDER}
    {% endif %}
    M117 Starting Print
    HOUR_COUNTER_ON

[gcode_macro Print_End]
gcode:
    {% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    G91                         ; relative positioning
    G1 E-6 F4800              ; retract
    G1 Z+1 X-2 Y-2 F6000
    G1 E-2 F500        ; short quick move to disengage from print
    G90                         ; absolute positioning
    
    # move up max allowable distance: Z80, else 10mm up, else max
    {% if printer.toolhead.position.z < 80 %}
        G1 Z80
    {% elif printer.toolhead.position.z + 10 < printer.configfile.config["stepper_z"]["position_max"] %}
        G91
        G1 Z+10
        G90
    {% else %}
        G1 Z{printer.stepper_z.position_max}
    {% endif %}

    G1 X05 Y05 F3000           ; move printhead out of the way
    HOUR_COUNTER_OFF
    M221 S100                   ; reset flow
    M104 S0                     ; turn off hotend
    M140 S0                     ; turn off heatbed
    M107                        ; turn off fan
    halo_done
   ; M84                         ; disable motors
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=hotend_fan TARGET=45 min_speed=0 max_speed=1
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_heater TARGET=0
    {% if status_led %}
        # indicate cooldown status
        UPDATE_DELAYED_GCODE ID=Update_Cooldown_Status DURATION=1
    {% endif %}

[gcode_macro Reset_State]
gcode:
    CLEAR_PAUSE ; clear pause state in case it was enabled
    M104 S0     ; cancel set temp
    M107        ; turn off part fan
    G21         ; set units to mm
    G90         ; use absolute coordinates
    M83         ; use relative extrusion
    G92 E0.0    ; reset e count
    M220 S100   ; reset speed multiplier
    M221 S100   ; reset flow
    HOUR_COUNTER_OFF ; Turn off hour counter if on
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=hotend_fan TARGET=45 min_speed=0 max_speed=1


[gcode_macro Prime_Line]
gcode:
	G1 Z2 F6000
	G1 X-3  Y0  F12000
	G1 Z0.3
	G1 X55 E10 F1000
	G1 X90 E5 F1000
    G1 X120 E2 F1000
	G92 E0.0             ;set extruder to Zero

[gcode_macro Beacon_Soak]
gcode:
    {% set BEACON_TARGET = params.BEACON_TARGET|default(70) %}
    {% set BEACON_MAXIMUM = params.BEACON_TARGET|int + 7 %}
    {% set EXTRUDER = params.EXTRUDER|default(260)|int - 60 %}
    {% set BED = params.BED|default(110) %}
    halo_preheat
    M106 S255
    G0 X90 Y90 Z0.5
    M104 S{EXTRUDER}
    RESPOND MSG="Heating Bed"
    M190 S{BED}
    {% if BEACON_TARGET|int > 0 %}
        RESPOND MSG="Cooking Bacon"
        TEMPERATURE_WAIT sensor="temperature_sensor beacon_coil" MINIMUM={BEACON_TARGET} ;MAXIMUM={BEACON_MAXIMUM}
        RESPOND MSG="Bacon is done"
    {% else %}
        RESPOND MSG="Skipping Bacon"
    {% endif %}

[gcode_macro Heat_Soak]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(105) %}
    {% set SOAK_MINS = params.SOAK_MINS|default(45) %}
    {% set CHAMBER_TARGET = params.CHAMBER_TARGET|default(35) %}
    {% set BED = params.BED|default(110) %}
    {% set chamber = printer['temperature_sensor chamber'] %}
    {% if chamber.temperature < CHAMBER_TARGET|int %}
        G28
        ;DETACH_PROBE
        M106 S255
        G0 X90 Y90 Z1
        M104 S160
        M117 Heating Bed
        M190 S{BED_TEMP}
        M117 Starting Soak
        {% for timer in range(SOAK_MINS|int,0,-1) %}
            M117 Soak: {timer}min left
            M105
            G4 P60000
        {% endfor %}
        M107
    {% endif %}


[delayed_gcode Soak_Time]
gcode:
    {% if printer["gcode_macro Heatsoak"].max_time|int == 0 %}
        { action_respond_info("Soak_Time should only be called if Heatsoak is running.") }
    {% elif ((printer["temperature_sensor chamber"].temperature >= printer["gcode_macro Heatsoak"].chamber_target|int) or (printer["gcode_macro Heatsoak"].elapsed_time|int >= printer["gcode_macro Heatsoak"].max_time|int)) %}
        M107    ; turn off fan
        { action_respond_info("Heatsoak complete") }
        RESTORE_GCODE_STATE NAME=Heatsoak_State MOVE=1
        BASE_RESUME
    {% else %}
        M140 S{printer["gcode_macro Heatsoak"].bed_hold|int}    ; set bed temp to avoid idle timeout

        {% set elapsed = printer["gcode_macro Heatsoak"].elapsed_time|int %}
        {% set max = printer["gcode_macro Heatsoak"].max_time|int %}
        { action_respond_info("Waiting for chamber temp. Seconds elapsed: %d/%d" % (elapsed, max)) }
        
        SET_GCODE_VARIABLE MACRO=Heatsoak VARIABLE=elapsed_time VALUE={printer["gcode_macro Heatsoak"].elapsed_time|int + printer["gcode_macro Heatsoak"].delay|int}
        UPDATE_DELAYED_GCODE ID=Soak_Time DURATION={printer["gcode_macro Heatsoak"].delay|int}  ; wait
    {% endif %}

[gcode_macro Skip]
gcode:
    SET_GCODE_VARIABLE MACRO=Heatsoak VARIABLE=chamber_target VALUE=0
    UPDATE_DELAYED_GCODE ID=Soak_Time DURATION=0
    UPDATE_DELAYED_GCODE ID=Soak_Time DURATION=1


[gcode_macro Filament_Loading_Variables]
variable_filament_loaded: False
gcode:

[gcode_macro Base_Load_Filament]
gcode:
    M117 Loading Filament...
    G92 E0.0
    G91
    
    {% if printer["gcode_macro Filament_Loading_Variables"].filament_loaded %}
        G1 E15 F500
    {% else %}
        G1 E40 F960
        G1 E50 F500 # used to be E55
        SET_GCODE_VARIABLE MACRO=Filament_Loading_Variables VARIABLE=filament_loaded VALUE=True
    {% endif %}

    G90
    G92 E0.0
    M400
    M117 Load Complete
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=5

[gcode_macro Base_Unload_Filament]
gcode:
    M117 Unloading Filament...
    G92 E0.0
    G91
    G1 E10 F400     ; extrude filament to get better blob on end
    G1 E-35 F1000   ; retract
    G1 E-45 F5200
    G90
    G92 E0.0
    M400
    SET_GCODE_VARIABLE MACRO=Filament_Loading_Variables VARIABLE=filament_loaded VALUE=False
    M117 Remove Filament Now!
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=5

[gcode_macro CANCEL_PRINT]
# for Fluidd and Mainsail compatibility
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% set X = params.X|default(05) %}
    {% set Y = params.Y|default(05) %}
    {% set Z = params.Z|default(10) %}
    {% set paused = printer.pause_resume.is_paused %}
    {% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    M104 S0
    M140 S0
    M141 S0
    M106 S0
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    {% if not paused %}
        G91
        G1 E-1.7 F2100
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F6000
        G91
    {% endif %}
    HOUR_COUNTER_OFF
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=hotend_fan TARGET=45 min_speed=0 max_speed=1
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_heater TARGET=0
    {% if status_led %}
        Update_Status_LED
    {% endif %}

[gcode_macro PAUSE]
# for Fluidd and Mainsail compatibility
rename_existing: BASE_PAUSE
gcode:
    {% set X = params.X|default(05) %}
    {% set Y = params.Y|default(05) %}
    {% set Z = params.Z|default(10) %}
    {% set nozzle_wiper = printer["gcode_macro Enable_Features"].nozzle_wiper %}
    {% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    HOUR_COUNTER_OFF
    {% if status_led %}
        Update_Status_LED
    {% endif %}
    G91
    G1 E-1.7 F2100
    G1 Z{Z}
    G90
    {% if nozzle_wiper %}
        Go_To_Purge_Location
    {% else %}
        G1 X{X} Y{Y} F6000
    {% endif %}
    G91

[gcode_macro RESUME]
# for Fluidd and Mainsail compatibility
rename_existing: BASE_RESUME
gcode:
    {% set nozzle_wiper = printer["gcode_macro Enable_Features"].nozzle_wiper %}
    {% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    {% if status_led %}
        Update_Status_LED
    {% endif %}
    G91
    G1 E1.7 F2100
    G90
    {% if nozzle_wiper %}
        Purge
    {% endif %}
    G91
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    HOUR_COUNTER_ON

[gcode_macro CLEAR_PAUSE]
rename_existing: BASE_CLEAR_PAUSE
gcode:
    {% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    BASE_CLEAR_PAUSE
    {% if status_led %}
        Update_Status_LED
    {% endif %}


[gcode_macro Tune_PA]
# run this before printing the pressure advance tuning tower
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.0005

[gcode_macro Nozzle_Wiper_Variables]
# the values below are for a wiper located at (-8, 125)
variable_purge_x:       -6.75  # x purge location
variable_purge_y:       113 # y purge location
variable_purge_x_entry: 0   # x entry location before going to the purge location
variable_purge_y_entry: 113 # y entry location before going to the purge location
variable_wipe_dx:       0   # distance to move in x from the purge position in order to wipe
variable_wipe_dy:       16  # distance to move in y from the purge position in order to wipe
variable_wipe_count:    2   # number of wipe cycles
variable_travel_speed:  300 # how fast travel speeds will be performed
variable_entry_speed:   100 # how fast to move from the entry location to the purge location
variable_wipe_speed:    50  # how fast to move when wiping
variable_purge_speed:   7   # how fast to extrude in mm/s when purging
variable_purge_fan:     128 # fan speed out of 255 when purging
gcode:

[gcode_macro Go_To_Purge_Location]
gcode:
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set St = printer["gcode_macro Nozzle_Wiper_Variables"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

[gcode_macro Wipe_Nozzle]
gcode:
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_count|int %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_speed * 60 %}
    
    # go to purge location
    Go_To_Purge_Location

    # wipe nozzle
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F{Sw}
        G1 X{Px + Wdx} Y{Py + Wdy} F{Sw}
    {% endfor %}

    # move away from wiper
    G1 X{Pxe + Wdx} Y{Pye + Wdy} F{Se}

[gcode_macro Purge]
gcode:
    {% set EXACT_TEMP = params.EXACT_TEMP|default(False) %}
    {% set TEMPERATURE = params.TEMPERATURE|default(250) %}
    {% set FEED_AMOUNT = params.FEED_AMOUNT|default(05) %}
    {% set Sp = printer["gcode_macro Nozzle_Wiper_Variables"].purge_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].purge_fan %}
    {% set old_Sf = printer.fan.speed %}
    
    # go to purge location
    Go_To_Purge_Location

    # wait for hotend
    {% if EXACT_TEMP == 'True' or printer.extruder.temperature < TEMPERATURE|float %}
        M109 S{TEMPERATURE}
    {% endif %}

    # turn on fan
    M106 S{Sf}

    # extrude
    M83
    G1 E{FEED_AMOUNT|float - 3} F{Sp}
    G1 E3 F100
    G92 E0.0

    # wait
    G4 P800

    # wipe the nozzle
    Wipe_Nozzle

    # reset fan speed
    M106 S{old_Sf}

[gcode_macro Fake_position]
# danger. Will pass set location to klipper to allow forced moves
gcode:
    SET_KINEMATIC_POSITION X=90 Y=90 Z=50

[gcode_macro testProbe]
gcode:
    G28
    z_tilt_adjust
    G28 Z
    BED_MESH_CALIBRATE

[gcode_macro bacon_drip]
gcode:
    RESPOND TYPE=echo MSG="Measuring backlash in Z. Watch for splatter."
    beacon_estimate_backlash